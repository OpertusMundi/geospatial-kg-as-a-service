from gkgaas.triplegeo.mapping import MapProperties, MappingSpecification

osm_shapefile_mapping_specification = MappingSpecification(
    file_name='mappings_osm.yml',
    map_properties_list=[
        # # SLIPO-specific constraint: Specifies a URI of each POI; If needed,
        # # extra attribute "DATA_SOURCE" is used for constructing these URIs
        # URI:
        #   entity: uri
        #   generateWith: getUUID(DATA_SOURCE,osm_id)
        MapProperties(
            name='URI',
            entity_type='uri',
            generator_function='getUUID',
            function_arguments=['DATA_SOURCE', 'osm_id']),

        # # SLIPO-specific constraint: Specifies the data source provider of
        # # each POI; Assuming that extra attribute "DATA_SOURCE" generated by
        # # TripleGeo is always used for constructing the URIs for data sources
        # DATA_SOURCE:
        #   partOf: sourceInfo
        #   entity: source
        #   predicate: slipo:sourceRef
        #   # Function call to fill-in this value that does NOT exist in the
        #   # original dataset
        #   generateWith: getDataSource
        MapProperties(
            name='DATA_SOURCE',
            part='sourceInfo',
            entity_type='source',
            predicate='slipo:sourceRef',
            generator_function='getDataSource'
        ),

        # # SLIPO-specific constraint: Specifies the URI for the category
        # # assigned to each POI; Assuming that extra attribute "CATEGORY_URI"
        # # generated by TripleGeo is always used for constructing the URIs for
        # # categories
        # CATEGORY_URI:
        #   entity: category
        #   predicate: slipo:category
        #   datatype: uri
        MapProperties(
            name='CATEGORY_URI',
            entity_type='category',
            predicate='slipo:category',
            datatype='uri'
        ),

        # # SLIPO-specific constraint: Specifies an internal category assigned
        # # to each POI; Assuming that a mapping to a default (embedded)
        # # classification scheme
        # ASSIGNED_CATEGORY:
        #   entity: assignedCategory
        #   predicate: slipo:assignedCategory
        #   generateWith: getEmbeddedCategory
        MapProperties(
            name='ASSIGNED_CATEGORY',
            entity_type='assignedCategory',
            predicate='slipo:assignedCategory',
            generator_function='getEmbeddedCategory'
        ),

        # osm_id:
        #   partOf: sourceInfo
        #   entity: source
        #   predicate: slipo:poiRef
        MapProperties(
            name='osm_id',
            part='sourceInfo',
            entity_type='source',
            predicate='slipo:poiRef'
        ),

        # last_update:
        #   entity: lastUpdated
        #   predicate: slipo:lastUpdated
        #   datatype: datetime
        MapProperties(
            name='last_update',
            entity_type='lastUpdated',
            predicate='slipo:lastUpdated',
            datatype='datetime'
        ),

        # phone:
        #   instanceOf: contact
        #   entity: phone
        #   predicate: slipo:phone
        #   type: phone
        MapProperties(
            name='phone',
            instance='contact',
            entity_type='phone',
            predicate='slipo:phone',
            resource_type='phone'
        ),

        # email:
        #   instanceOf: contact
        #   entity: email
        #   predicate: slipo:email
        #   type: email
        MapProperties(
            name='email',
            instance='contact',
            entity_type='email',
            predicate='slipo:email',
            resource_type='email'
        ),

        # fax:
        #   instanceOf: contact
        #   entity: fax
        #   predicate: slipo:fax
        #   type: fax
        MapProperties(
            name='fax',
            instance='contact',
            entity_type='fax',
            predicate='slipo:fax',
            resource_type='fax'
        ),

        # website:
        #   entity: homepage
        #   predicate: slipo:homepage
        #   datatype: string
        MapProperties(
            name='website',
            entity_type='homepage',
            predicate='slipo:homepage',
            datatype='string'
        ),

        # wikipedia:
        #   entity: wikipedia
        #   predicate: slipo:otherLink
        #   datatype: string
        MapProperties(
            name='wikipedia',
            entity_type='wikipedia',
            predicate='slipo:otherLink',
            datatype='string'
        ),

        # opening_hours:
        #   # FIXME_: Work-around for SLIPO ontology: This must be actually
        #   # specified as an instance of the TimeSlot entity.
        #   partOf: timeSlot
        #   entity: openingHours
        #   predicate: slipo:concat
        MapProperties(
            name='opening_hours',
            part='timeSlot',
            entity_type='openingHours',
            predicate='slipo:concat'
        ),

        # name:
        #   instanceOf: name
        #   entity: name
        #   predicate: slipo:name
        #   type: official
        MapProperties(
            name='name',
            instance='name',
            entity_type='name',
            predicate='slipo:name',
            resource_type='official'
        ),

        # TRANSLIT:
        #   instanceOf: name
        #   entity: translit_name
        #   predicate: slipo:name
        #   type: transliterated
        #   language: en
        #   # Function call to fill-in this value that does NOT exist in the
        #   # original dataset
        #   generateWith: getTransliteration(name)
        MapProperties(
            name='TRANSLIT',
            instance='name',
            entity_type='translit_name',
            predicate='slipo:name',
            resource_type='transliterated',
            language='en',
            generator_function='getTransliteration',
            function_arguments=['name']
        ),

        # # Specification for multi-faceted attribute values (i.e., names in
        # # multiple languages)
        # name_%LANG:
        #   instanceOf: name
        #   entity: name
        #   predicate: slipo:name
        #   # Instructs NOT to issue triples regarding resource type
        #   type: NONE
        #   # Function call that is invoked at runtime to extract the language
        #   # tag from the attribute name
        #   language: getLanguage
        MapProperties(
            name='name_%LANG',
            instance='name',
            entity_type='name',
            predicate='slipo:name',
            resource_type='NONE',
            language='getLanguage'
        ),

        # int_name:
        #   instanceOf: name
        #   entity: int_name
        #   predicate: slipo:name
        #   type: international
        MapProperties(
            name='int_name',
            instance='name',
            entity_type='int_name',
            predicate='slipo:name',
            resource_type='international'
        ),

        # alt_name:
        #   instanceOf: name
        #   entity: alt_name
        #   predicate: slipo:name
        #   type: alternate
        MapProperties(
            name='alt_name',
            instance='name',
            entity_type='alt_name',
            predicate='slipo:name',
            resource_type='alternate'
        ),

        # street:
        #   partOf: address
        #   entity: address
        #   predicate: slipo:street
        MapProperties(
            name='street',
            part='address',
            entity_type='address',
            predicate='slipo:street'
        ),

        # housenumber:
        #   partOf: address
        #   entity: address
        #   predicate: slipo:number
        MapProperties(
            name='housenumber',
            part='address',
            entity_type='address',
            predicate='slipo:number'
        ),

        # city:
        #   partOf: address
        #   entity: address
        #   predicate: slipo:locality
        MapProperties(
            name='city',
            part='address',
            entity_type='address',
            predicate='slipo:locality'
        ),

        # country:
        #   partOf: address
        #   entity: address
        #   predicate: slipo:country
        MapProperties(
            name='country',
            part='address',
            entity_type='address',
            predicate='slipo:country'
        ),

        # postcode:
        #   partOf: address
        #   entity: address
        #   predicate: slipo:postcode
        MapProperties(
            name='postcode',
            part='address',
            entity_type='address',
            predicate='slipo:postcode'
        ),

        # image:
        #   # FIXME_: Work-around for SLIPO ontology: This must be actually
        #   # specified as an instance of the Media entity.
        #   partOf: media
        #   entity: media
        #   predicate: slipo:url
        #   type: image
        #   datatype: uri
        MapProperties(
            name='image',
            part='media',
            entity_type='media',
            predicate='slipo:url',
            resource_type='image',
            datatype='uri'
        ),

        # description:
        #   entity: description
        #   predicate: slipo:description
        MapProperties(
            name='description',
            entity_type='description',
            predicate='slipo:description'
        ),

        # LONGITUDE:
        #   entity: lon
        #   predicate: wgs84_pos:long
        #   datatype: float
        #   # Function call to fill-in this value that does NOT exist in the
        #   # original dataset
        #   generateWith: geometry.getLongitude
        MapProperties(
            name='LONGITUDE',
            entity_type='lon',
            predicate='wgs84_pos:long',
            datatype='float',
            generator_function='geometry.getLongitude'
        ),


        # LATITUDE:
        #   entity: lat
        #   predicate: wgs84_pos:lat
        #   datatype: float
        #   # Function call to fill-in this value that does NOT exist in the
        #   # original dataset
        #   generateWith: geometry.getLatitude
        MapProperties(
            name='LATITUDE',
            entity_type='lat',
            predicate='wgs84_pos:lat',
            datatype='float',
            generator_function='geometry.getLatitude'
        ),

        # # Auto-generated attribute (NOT existing in the original data) based
        # # on geometry
        # AREA:
        #   entity: area
        #   predicate: slipo:area
        #   datatype: float
        #   # Function call to fill-in this value that does NOT exist in the
        #   # original dataset
        #   generateWith: geometry.getArea
        MapProperties(
            name='AREA',
            entity_type='area',
            predicate='slipo:area',
            datatype='float',
            generator_function='geometry.getArea'
        ),

        # # Auto-generated attribute (NOT existing in the original data) based
        # # on geometry
        # LENGTH:
        #   entity: length
        #   predicate: slipo:length
        #   datatype: float
        #   # Function call to fill-in this value that does NOT exist in the
        #   # original dataset
        #   generateWith: geometry.getLength
        MapProperties(
            name='LENGTH',
            entity_type='length',
            predicate='slipo:length',
            datatype='float',
            generator_function='geometry.getLength'
        )
    ])
